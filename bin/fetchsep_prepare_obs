#!/usr/bin/env python

import fetchsep.idsep
import fetchsep.idsep.make_event_list as event_list
import fetchsep.opsep as opsep
import fetchsep.opsep.batch_run_opsep as batch
import fetchsep.utils.config as cfg
import fetchsep.utils.tools as tools
import argparse
import matplotlib.pyplot as plt
import datetime
from importlib import reload
import sys
import os
import logging


logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger('opsep')
logging.getLogger("matplotlib").setLevel(logging.WARNING)



#Helper
def septimes_fname(experiment, flux_type, exp_name, options, energy_bin,
    doBGSub=False, spacecraft=""):
    """ Create the filename of the file output by
        SEPAutoID (idsep) that contains the SEP start and
        end times of interest.
        
        INPUTS:
        
        :experiment: (string) name of experiment
        :flux_type: (string) integral or differential
        :options: (string array)
        :energy_bins: (1x2 float array) [low edge,high edge]
            If the bin is >10 MeV, [10,-1]
        
    """
    #Additions to titles and filenames according to user-selected options
    modifier, title_mod = tools.setup_modifiers(options, spacecraft=spacecraft)
    name = tools.idsep_naming_scheme(experiment, flux_type, exp_name, options, spacecraft=spacecraft)

    prename = (f"SEPTimes_{name}")
 
    energy_bin[0] = float(energy_bin[0])
    if energy_bin[1] == -1:
        energy_bin[1] = int(energy_bin[1])
    else:
        energy_bin[1] = float(energy_bin[1])
 
    fname = os.path.join(cfg.outpath,"idsep", name, f"{prename}_{energy_bin[0]}_to_{energy_bin[1]}.txt")

    if not os.path.isfile(fname):
        bin0 = int(energy_bin[0])
        bin1 = int(energy_bin[1])
        fname = os.path.join(cfg.outpath,"idsep", name, f"{prename}_{bin0}_to_{bin1}.txt")
        
        if not os.path.isfile(fname):
            sys.exit(f"septimes_fname: Cannot find either file: {fname} or "
                f"{prename}_{energy_bin[0]}_to_{energy_bin[1]}.txt")

    return fname



#------------------------- WORKFLOW -----------------------

#FIRST ###########################
#Read in a long time series and automatically identify
#increases above background and output a preliminary list of
#SEP events.
##################################
parser = argparse.ArgumentParser()
parser.add_argument("--StartDate", type=str, default='',
        help=("Start date in YYYY-MM-DD or \"YYYY-MM-DD HH:MM:SS\" with quotes"))

parser.add_argument("--EndDate", type=str, default='',
        help=("End date in YYYY-MM-DD or \"YYYY-MM-DD HH:MM:SS\" with quotes"))

parser.add_argument("--Experiment", type=str,
        choices=['GOES', 'GOES-05', 'GOES-06', 'GOES-07', 'GOES-08', 'GOES-10',
                'GOES-11', 'GOES-12', 'GOES-13', 'GOES-14', 'GOES-15',
                'GOES-16','GOES-17','GOES-18','GOES_RT', 'SEPEM', 'SEPEMv3',
                'EPHIN', 'EPHIN_REleASE', 'CalGOES', 'ACE_SIS',
                'ACE_EPAM_electrons', 'IMP8_CPME', 'user'],
        default='', help="Enter name of spacecraft or dataset")

parser.add_argument("--FluxType", type=str, choices=['integral', 'differential'],
        default='', help=("Are these integral or differential fluxes?"))

parser.add_argument("--Spacecraft", type=str, choices=['primary', 'secondary'],
        default='', help=("If GOES_RT is selected, choose the primary or secondary spacecraft."))

parser.add_argument("--ExperimentName", type=str, default='',
        help=("If you chose user for experiment, specify the  name of the "
                "model or experiment that you are analyzing (no spaces)."))

parser.add_argument("--UserFile", type=str, default='tmp.txt',
        help=("If you chose user for experiment, specify the filename containing the fluxes. "
                "Specify energy bins and delimeter in the config "
                "file (idsep/config.py). Default is tmp.txt."))

parser.add_argument("--Unixtime",
        help=("Flag to indicate first column in user file is in unixtime"),
                action="store_true")

parser.add_argument("--options", type=str, default='',
        help=("You may specify a series of options as a semi-colon "
                "separated list surrounded by quotations.\n"
                "\"uncorrected\" for GOES uncorrected differential "
                " fluxes with nominal GOES energy bins,\n "
                "\"S14\" to apply Sandberg et al. (2014) "
                "effective energies to GOES uncorrected fluxes for P2-P6,\n "
                "\"Bruno2017\" to apply Bruno (2017) effective "
                "energies to GOES-13 or GOES-15 P6-P11 channels "
                "for either corrected or uncorrected GOES fluxes.\n"
                "If both S14 and Bruno2017 are specified for "
                "GOES-13 or GOES-15, S14 bins will be applied to "
                "P2-P5 and Bruno2017 bins will be applied to P6-P11 "
                "for uncorrected fluxes.\n"
                "e.g. \"uncorrected;S14;Bruno2017\""))

parser.add_argument("--DoInterp",
        help=("Fill in negative, bad, or missing fluxes via "
                "linear interpolation in time."), action="store_true")

parser.add_argument("--RemoveAbove", type=float, default=999999,
        help=("Remove all flux points above a specified value. "
                "The same value is applied to all channels."))
        
parser.add_argument("--ForInclusive",
        help="Write out end times such that they end 1 second "
                "before the next data point begins.",
                action="store_true")

parser.add_argument("--PlotTimeSeriesOnly",
        help="Only plot the flux timeseries without calculating "
                "background and SEP events.", action="store_true")

parser.add_argument("--showplot",
        help="Flag to display plots in IDSEP.", action="store_true")


####### OpSEP Arguments #####
parser.add_argument("--Threshold", type=str, default="",
        help=("An additional energy and flux thresholds "
                "(written as 100,1 with no spaces) which will be "
                "used to define the event. e.g. 100,1 indicates "
                ">100 MeV fluxes crossing 1 pfu (1/[cm^2 s sr]). "
                "Multiple thresholds may be written as \"30,1;50,1\" "
                "separated by a semi-colon."))

parser.add_argument("--UMASEP",
        help=("Set flag to calculate flux values and thresholds "
                "specific to the UMASEP model. Thresholds for >10, >30, "
                ">50, >100 MeV and flux values at 3, 4, 5, 6, 7 hours "
                "after crossing thresholds."), action="store_true")

parser.add_argument("--JSONType", type=str, choices=['model',
        'observations'], default='observations',
        help=("For user-input files, specify whether they are observations "
        "or model predictions to generate a JSON file in the correct format. "
        "Choices are \"model\" or \"observations\" Default is observations."))

parser.add_argument("--Location", type=str, default='earth',
        help=("Location of time profile. CCMC json files recognize: mercury, venus, "
            "earth, mars, psp, stereoa, stereob, dawn, juno, L1, L2, L4, L5. You may "
            "enter another location if needed. Default = earth."))

parser.add_argument("--Species", type=str, default='protons',
        help=("Location of time profile. CCMC json files recognize: electron, proton, "
              " helium, helium3, helium4, oxygen, iron, ion. You may "
              "enter another location if needed. Default = proton"))


parser.add_argument("--IDSEPEnhancement",
        help="Set flag to use background mean+n*sigma found with IDSEP "
            "to identify SEP enhancement above background in OpSEP. ",
            action="store_true")

parser.add_argument("--IDSEPSubtractBG",
        help="Set flag to subtract the background from the "
            "SEP flux using the background found with IDSEP in OpSEP. ",
            action="store_true")


####### BATCH Arguments ######
parser.add_argument("--BatchFile", type=str, default='batch_event_list.txt',
        help=("Specify the name of the batch file. Will create a new"
                "batch file with this name if StartPoint set to IDSEP or MAKEFILE."
                "Will look for an existing batch file if StartPoint is BATCH."
                "Default is batch_event_list.txt."))

parser.add_argument("--ReferenceEnergyBin", type=str, default="10,-1",
        help=("Specify an energy bin array to use to create the batch file. "
            "The energy bin must exactly match an energy bin in the dataset. "
            "The SEP event list for this energy bin created by IDSEP will "
            "be used to determine the time periods to batch run OpSEP. "
            "Use quote marks and specify the low edge, high edge. Use -1 "
            "as the high edge for an integral energy channel."
            "Default = \"10,-1\""))

#WHERE TO START IN THE WORKFLOW
parser.add_argument("--StartPoint", type=str, default="IDSEP",
        choices=['IDSEP','MAKEFILE','BATCH'],
        help=("Indicate where in the workflow you want to start.\n"
                "IDSEP will start at the beginning.\n"
                "MAKEFILE will start at the point of converting "
                "the IDSEP output into a file to batch run OpSEP.\n"
                "BATCH will start at the point of batch running "
                "OpSEP (useful if change made to opsep itself and "
                "want to rerun).\n "
                "Default is IDSEP (beginnning)."))


args = parser.parse_args()

str_startdate = args.StartDate
str_enddate = args.EndDate
experiment = args.Experiment
flux_type = args.FluxType
spacecraft = args.Spacecraft
location = args.Location
species = args.Species
exp_name = args.ExperimentName
user_file = args.UserFile
is_unixtime = args.Unixtime

options = args.options
dointerp = args.DoInterp

remove_above = args.RemoveAbove
for_inclusive = args.ForInclusive
plot_timeseries_only = args.PlotTimeSeriesOnly

doBGSubIDSEP = args.IDSEPSubtractBG
IDSEPEnhancement = args.IDSEPEnhancement
flags = ''
if doBGSubIDSEP: flags = 'IDSEPSubtractBG'
if IDSEPEnhancement:
    if flags == '':
        flags = "IDSEPEnhancement"
    else:
        flags = f"{flags};IDSEPEnhancement"


showplot = args.showplot
saveplot = True #args.saveplot #Always saveplot for this script

threshold = args.Threshold
umasep = args.UMASEP
json_type = args.JSONType

energy_bin = args.ReferenceEnergyBin
energy_bin = energy_bin.strip().split(",")
energy_bin[0] = float(energy_bin[0])
if energy_bin[1] != -1: energy_bin[1] = float(energy_bin[1])
batchfile = args.BatchFile
startpoint = args.StartPoint

#IDSEP PATH
idsep_name = tools.idsep_naming_scheme(experiment, flux_type, exp_name, options, spacecraft=spacecraft)


if startpoint == "IDSEP":
    fetchsep.idsep.run_all(str_startdate, str_enddate,
        experiment, flux_type, exp_name, user_file, is_unixtime,
        options, dointerp, remove_above, for_inclusive,
        plot_timeseries_only, showplot, saveplot, spacecraft=spacecraft)

    if plot_timeseries_only:
        sys.exit("User selected to only plot the timeseries. Exiting.")



#If user selected "GOES", then list of GOES detectors with time
#will be stored here.
goesfname = ''
if experiment == "GOES":
    goesfname = os.path.join(cfg.outpath, "idsep", idsep_name, "goes_experiments_dates.txt")


#SECOND ########################
#Parse the output file created in the previous step. This will
#rewrite in the correct format to batch run quiet and elevated
#time periods in OpSEP.
################################

if startpoint == "MAKEFILE" or startpoint == "IDSEP":
    septimes_file = septimes_fname(experiment, flux_type, exp_name, options, energy_bin, spacecraft=spacecraft)
    detector_list = goesfname
    revise = True #add time padding in front of each SEP event
    event_list.make_event_list(str_startdate, str_enddate,
        septimes_file, detector_list,experiment, flux_type,options, json_type,
        batchfile, revise, flags=flags, spacecraft=spacecraft,
        location=location, species=species, add_path=idsep_name)


#THIRD #########################
#Batch run OpSEP using the input file created above
#to extract information and create json files and plots
#for each quite period and each elevated period.
#Identify SEP events that increase above thresholds.
################################

#### BATCH startpoint

############## SET DEFAULTS ##################
showplot = False
saveplot = True
detect_prev_event_default = False #Set to true if get FirstStart flag
two_peaks_default = False #Set to true if get ShortEvent flag
############## END DEFAULTS #################
sep_filename = os.path.join(cfg.outpath, "idsep", idsep_name, batchfile)
statusfname = 'batch_run_status.csv'

batch.run_all_events(sep_filename, statusfname, threshold, umasep=umasep,
    dointerp=dointerp, showplot=showplot, saveplot=saveplot,
    detect_prev_event=detect_prev_event_default, two_peaks=two_peaks_default)
