#!/usr/bin/env python

import fetchsep.idsep
import fetchsep.idsep.make_event_list as event_list
import fetchsep.opsep as opsep
import fetchsep.opsep.batch_run_opsep as batch
import fetchsep.utils.config as cfg
import argparse
import matplotlib.pyplot as plt
import datetime
from importlib import reload
import sys
import os
import logging


logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger('opsep')
logging.getLogger("matplotlib").setLevel(logging.WARNING)



#Helper
def septimes_fname(experiment, flux_type, options, energy_bin, spacecraft=""):
    """ Create the filename of the file output by
        SEPAutoID (idsep) that contains the SEP start and
        end times of interest.
        
        INPUTS:
        
        :experiment: (string) name of experiment
        :flux_type: (string) integral or differential
        :options: (string array)
        :energy_bins: (1x2 float array) [[low edge],[high edge]]
            If the bin is >10 MeV, [[10],[-1]]
        
    """
    #Additions to titles and filenames according to user-selected options
    modifier, title_mod = plt_tools.setup_modifiers(options, doBGSub, spacecraft=spacecraft)


    prename = (f"SEPTimes_{experiment}_{flux_type}{modifier}")
    if experiment == 'user' and exp_name != '':
        prename = (f"SEPTimes_{exp_name}_{flux_type}{modifier}")
 
    fname = os.path.join(cfg.outpath,"idsep", f"{prename}_{energy_bin[0]}_to_{energy_bin[1]}.txt")
    
    if not os.path.isfile(fname):
        bin0 = int(energy_bin[0])
        bin1 = int(energy_bin[1])
        fname = os.path.join(cfg.outpath,"idsep", f"{prename}_{bin0}_to_{bin1}.txt")
        
        if not os.path.isfile(fname):
            sys.exit("septimes_fname: Cannot find file: " + fname)
    
    return fname



#------------------------- WORKFLOW -----------------------

#FIRST ###########################
#Read in a long time series and automatically identify
#increases above background and output a preliminary list of
#SEP events.
##################################
parser = argparse.ArgumentParser()
parser.add_argument("--StartDate", type=str, default='',
        help=("Start date in YYYY-MM-DD or \"YYYY-MM-DD HH:MM:SS\""
               " with quotes"))
parser.add_argument("--EndDate", type=str, default='',
        help=("End date in YYYY-MM-DD or \"YYYY-MM-DD HH:MM:SS\""
                " with quotes"))
parser.add_argument("--Experiment", type=str,
        choices=['GOES','GOES-08', 'GOES-10', 'GOES-11',
                'GOES-12', 'GOES-13', 'GOES-14', 'GOES-15',
                'GOES-16','GOES-17','GOES-18','GOES_RT', 'SEPEM', 'SEPEMv3',
                'EPHIN', 'EPHIN_REleASE', 'CalGOES','user'],
        default='', help="Enter name of spacecraft or dataset")
parser.add_argument("--FluxType", type=str, choices=['integral',
        'differential'], default='',
        help=("Are these integral or differential fluxes?"))
parser.add_argument("--Spacecraft", type=str, choices=['primary',
        'secondary'], default='',
        help=("If GOES_RT is selected, choose the primary or secondary spacecraft."))
parser.add_argument("--ExperimentName", type=str, default='',
        help=("If you chose user for experiment, specify the "
                "name of the model or experiment that you are "
                "analyzing (no spaces)."))
parser.add_argument("--UserFile", type=str, default='tmp.txt',
        help=("If you chose user for experiment, specify the "
                "filename containing the fluxes. "
                "Specify energy bins and delimeter in the config "
                "file (idsep/config.py). Default is tmp.txt."))
parser.add_argument("--Unixtime",
        help=("Flag to indicate first column in user file is "
                "in unixtime"), action="store_true")
parser.add_argument("--options", type=str, default='',
        help=("You may specify a series of options as a semi-colon "
                "separated list surrounded by quotations.\n"
                "\"uncorrected\" for GOES uncorrected differential "
                " fluxes with nominal GOES energy bins,\n "
                "\"S14\" to apply Sandberg et al. (2014) "
                "effective energies to GOES uncorrected fluxes for "
                "P2-P6,\n "
                "\"Bruno2017\" to apply Bruno (2017) effective "
                "energies to GOES-13 or GOES-15 P6-P11 channels "
                "for either corrected or uncorrected GOES fluxes.\n"
                "If both S14 and Bruno2017 are specified for "
                "GOES-13 or GOES-15, S14 bins will be applied to "
                "P2-P5 and Bruno2017 bins will be applied to P6-P11 "
                "for uncorrected fluxes.\n"
                "e.g. \"uncorrected;S14;Bruno2017\""))
parser.add_argument("--DoInterp",
        help=("Fill in negative, bad, or missing fluxes via "
                "linear interpolation in time."), action="store_true")
parser.add_argument("--SubtractBG",
        help="Set to calculate the background and subtract from the "\
                "SEP flux. Must define start and end dates for the background.",
                action="store_true")

parser.add_argument("--RemoveAbove", type=float, default=999999,
        help=("Remove all flux points above a specified value. "
                "The same value is applied to all channels."))
        
parser.add_argument("--ForInclusive",
        help="Write out end times such that they end 1 second "
                "before the next data point begins.",
                action="store_true")
parser.add_argument("--PlotTimeSeriesOnly",
        help="Only plot the flux timeseries without calculating "
                "background and SEP events.", action="store_true")

parser.add_argument("--showplot",
        help="Flag to display plots in IDSEP.", action="store_true")

####### OpSEP Arguments #####
parser.add_argument("--Threshold", type=str, default="",
        help=("An additional energy and flux thresholds "
                "(written as 100,1 with no spaces) which will be "
                "used to define the event. e.g. 100,1 indicates "
                ">100 MeV fluxes crossing 1 pfu (1/[cm^2 s sr]). "
                "Multiple thresholds may be written as \"30,1;50,1\" "
                "separated by a semi-colon."))
parser.add_argument("--UMASEP",
        help=("Set flag to calculate flux values and thresholds "
                "specific to the UMASEP model. Thresholds for >10, >30, "
                ">50, >100 MeV and flux values at 3, 4, 5, 6, 7 hours "
                "after crossing thresholds."), action="store_true")

#WHERE TO START IN THE WORKFLOW
parser.add_argument("--StartPoint", type=str, default="IDSEP",
        choices=['IDSEP','MAKEFILE','BATCH'],
        help=("Indicate where in the workflow you want to "
                "start.\n"
                "IDSEP will start at the beginning.\n"
                "MAKEFILE will start at the point of converting "
                "the IDSEP output into a file to batch run OpSEP.\n"
                "BATCH will start at the point of batch running "
                "OpSEP (useful if change made to opsep itself and "
                "want to rerun).\n "
                "Default is IDSEP (beginnning)."))


args = parser.parse_args()

str_startdate = args.StartDate
str_enddate = args.EndDate
experiment = args.Experiment
flux_type = args.FluxType
spacecraft = args.Spacecraft
exp_name = args.ExperimentName
user_file = args.UserFile
is_unixtime = args.Unixtime
doBGSub = args.SubtractBG

options = args.options
dointerp = args.DoInterp

remove_above = args.RemoveAbove
for_inclusive = args.ForInclusive
plot_timeseries_only = args.PlotTimeSeriesOnly

showplot = args.showplot
saveplot = True #args.saveplot #Always saveplot for this script

threshold = args.Threshold
umasep = args.UMASEP

startpoint = args.StartPoint
    
    
if startpoint == "IDSEP":
    fetchsep.idsep.run_all(str_startdate, str_enddate,
        experiment, flux_type, exp_name, user_file, is_unixtime,
        options, doBGSub, dointerp, remove_above, for_inclusive,
        plot_timeseries_only, showplot, saveplot, spacecraft=spacecraft)

    if plot_timeseries_only:
        sys.exit("User selected to only plot the timeseries. Exiting.")



#If user selected "GOES", then list of GOES detectors with time
#will be stored here. Written out in
#fetchsep/utils/read_dataset_auto_id.py > check_all_goes_data()
goesfname = ''
if experiment == "GOES":
    goesfname = cfg.outpath + "/idsep/goes_experiments_dates.txt"


#SECOND ########################
#Parse the output file created in the previous step. This will
#rewrite in the correct format to batch run quiet and elevated
#time periods in OpSEP.
################################
energy_bin = cfg.ref_energy_bin
batchfile = 'batch_event_list.txt'

if startpoint == "MAKEFILE" or startpoint == "IDSEP":
    septimes_file = septimes_fname(experiment, flux_type, options, energy_bin, spacecraft=spacecraft)
    detector_list = goesfname
    revise = True #add time padding in front of each SEP event
    event_list.make_event_list(str_startdate, str_enddate,
        septimes_file, detector_list,experiment, flux_type,options,
        batchfile, revise)



#THIRD #########################
#Batch run OpSEP using the input file created above
#to extract information and create json files and plots
#for each quite period and each elevated period.
#Identify SEP events that increase above thresholds.
################################

#if startpoint == "BATCH" or startpoint == "MAKEFILE" \
#    or startpoint == "IDSEP":
#    continue

############## SET DEFAULTS ##################
showplot = False
saveplot = True
detect_prev_event_default = False #Set to true if get FirstStart flag
two_peaks_default = False #Set to true if get ShortEvent flag
############## END DEFAULTS #################
sep_filename = os.path.join(cfg.outpath,'idsep',batchfile)
statusfname = 'batch_run_status.csv'

batch.run_all_events(sep_filename, statusfname, threshold, umasep,
    dointerp=dointerp, showplot=showplot, saveplot=saveplot,
    detect_prev_event=detect_prev_event_default, two_peaks=two_peaks_default)
